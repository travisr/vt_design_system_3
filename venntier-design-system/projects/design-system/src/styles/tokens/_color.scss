@use 'sass:map';

// REFERENCE TOKENS - Raw design values (single source of truth)
// These are the actual hex values, px sizes, etc. that define our design system
// Angular Material will map these to system tokens via the theming API

// ============================================================================
// COLOR REFERENCE TOKENS
// ============================================================================

// Core brand colors
$black: #000000;
$white: #ffffff;
$green: #10a37f; // OpenAI brand green
$red: #ef4444; // Error/warn red
$purple: #8b5cf6; // Accent purple

// OpenAI-inspired gray scale (refined, warmer)
$gray-950: #0a0a0a; // Deepest dark
$gray-900: #202123; // OpenAI dark mode background
$gray-800: #353740; // OpenAI sidebar dark
$gray-700: #40414f; // OpenAI border dark
$gray-600: #565869; // OpenAI secondary text
$gray-500: #6e6e80; // OpenAI focus border
$gray-400: #9ca3af; // OpenAI disabled text
$gray-300: #d1d5db; // OpenAI standard border
$gray-200: #e5e5e5; // OpenAI active state (exact match)
$gray-175: #ececf1; // OpenAI hover state (exact match)
$gray-150: #f7f7f8; // OpenAI sidenav background (exact match)
$gray-100: #f9f9f9; // OpenAI input background
$gray-50: #fafafa; // OpenAI body background
$gray-25: #fdfdfd; // Very light gray (not pure white)

// Red scale for error/warn states
$red-50: #fef2f2; // Light red container
$red-100: #fee2e2; // Lighter red container
$red-500: #ef4444; // Base red (same as $red)
$red-600: #dc2626; // Darker red
$red-900: #7f1d1d; // Dark red text

// Green scale for success/tertiary states
$green-50: #f0fdf4; // Light green container
$green-100: #dcfce7; // Lighter green container
$green-500: #10a37f; // Base green (same as $green)

// ============================================================================
// SEMANTIC COLOR MAPPINGS (for Angular Material theming API)
// ============================================================================
// These map our reference tokens to semantic roles that Angular Material understands
// Use these in mat.define-theme() calls, NOT as CSS custom properties

// Light theme semantic mappings
$light-theme-colors: (
  // Primary role (monochrome/neutral)
  primary: $black,
  on-primary: $white,
  primary-container: $gray-100,
  on-primary-container: $black,

  // Secondary role (warn/error)
  secondary: $red-500,
  on-secondary: $white,
  secondary-container: $red-50,
  on-secondary-container: $red-600,

  // Tertiary role (success/accent)
  tertiary: $green-500,
  on-tertiary: $white,
  tertiary-container: $green-50,
  on-tertiary-container: $green-500,

  // Surface hierarchy
  surface: $white,
  on-surface: $black,
  surface-variant: $gray-50,
  on-surface-variant: $gray-600,

  // Utility colors
  outline: $gray-300,
  outline-variant: $gray-200,
  error: $red-500,
  on-error: $white,
  error-container: $red-50,
  on-error-container: $red-600
);

// Dark theme semantic mappings
$dark-theme-colors: (
  // Primary role (inverted for dark mode)
  primary: $white,
  on-primary: $black,
  primary-container: $gray-800,
  on-primary-container: $gray-100,

  // Secondary role (warn/error - same red)
  secondary: $red-500,
  on-secondary: $white,
  secondary-container: $red-900,
  on-secondary-container: $red-100,

  // Tertiary role (success/accent - same green)
  tertiary: $green-500,
  on-tertiary: $white,
  tertiary-container: $gray-800,
  on-tertiary-container: $green-100,

  // Surface hierarchy (dark)
  surface: $gray-900,
  on-surface: $white,
  surface-variant: $gray-800,
  on-surface-variant: $gray-400,

  // Utility colors (dark)
  outline: $gray-600,
  outline-variant: $gray-700,
  error: $red-500,
  on-error: $white,
  error-container: $red-900,
  on-error-container: $red-100
);

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

// Get a reference token value
@function get-color($name) {
  $color-map: (
    'black': $black,
    'white': $white,
    'green': $green,
    'red': $red,
    'purple': $purple,
    'gray-950': $gray-950,
    'gray-900': $gray-900,
    'gray-800': $gray-800,
    'gray-700': $gray-700,
    'gray-600': $gray-600,
    'gray-500': $gray-500,
    'gray-400': $gray-400,
    'gray-300': $gray-300,
    'gray-200': $gray-200,
    'gray-175': $gray-175,
    'gray-150': $gray-150,
    'gray-100': $gray-100,
    'gray-50': $gray-50,
    'gray-25': $gray-25,
    'red-50': $red-50,
    'red-100': $red-100,
    'red-500': $red-500,
    'red-600': $red-600,
    'red-900': $red-900,
    'green-50': $green-50,
    'green-100': $green-100,
    'green-500': $green-500,
  );

  @if map.has-key($color-map, $name) {
    @return map.get($color-map, $name);
  } @else {
    @error "Color '#{$name}' not found in color map.";
  }
}
