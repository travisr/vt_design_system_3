name: Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: venntier-design-system/package-lock.json

      - name: Install dependencies
        run: |
          cd venntier-design-system
          npm ci

      - name: Run linting
        run: |
          cd venntier-design-system
          npm run lint:all

      - name: Run type checking
        run: |
          cd venntier-design-system
          npm run typecheck

      - name: Build library
        run: |
          cd venntier-design-system
          npm run build:lib

      - name: Run unit tests with coverage
        run: |
          cd venntier-design-system
          npm run test:coverage

      - name: Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          directory: venntier-design-system/coverage/
          fail_ci_if_error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: |
            venntier-design-system/coverage/
            venntier-design-system/test-results/

  visual-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: venntier-design-system/package-lock.json

      - name: Install dependencies
        run: |
          cd venntier-design-system
          npm ci

      - name: Install Playwright browsers
        run: |
          cd venntier-design-system
          npx playwright install --with-deps

      - name: Build demo application
        run: |
          cd venntier-design-system
          npm run build

      - name: Run visual regression tests
        run: |
          cd venntier-design-system
          npm run test:visual

      - name: Upload visual test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results
          path: |
            venntier-design-system/test-results/
            venntier-design-system/playwright-report/

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: venntier-design-system/package-lock.json

      - name: Install dependencies
        run: |
          cd venntier-design-system
          npm ci

      - name: Install Playwright browsers
        run: |
          cd venntier-design-system
          npx playwright install --with-deps

      - name: Build demo application
        run: |
          cd venntier-design-system
          npm run build

      - name: Run accessibility tests
        run: |
          cd venntier-design-system
          npx playwright test tests/visual/accessibility.spec.ts

      - name: Upload accessibility test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-test-results
          path: |
            venntier-design-system/test-results/
            venntier-design-system/playwright-report/

  performance-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: venntier-design-system/package-lock.json

      - name: Install dependencies
        run: |
          cd venntier-design-system
          npm ci

      - name: Build library and demo
        run: |
          cd venntier-design-system
          npm run build

      - name: Analyze bundle size
        run: |
          cd venntier-design-system
          npx bundlesize

      - name: Run Lighthouse CI
        run: |
          cd venntier-design-system
          npm install -g @lhci/cli
          npm run start &
          sleep 30
          lhci autorun --upload.target=temporary-public-storage

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, visual-tests, accessibility-tests, performance-tests]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "unit-test-results-node-20.x/coverage" ]; then
            echo "## Unit Test Coverage" >> $GITHUB_STEP_SUMMARY
            echo "Coverage reports available in artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "visual-test-results" ]; then
            echo "## Visual Regression Tests" >> $GITHUB_STEP_SUMMARY
            echo "Visual test results available in artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "accessibility-test-results" ]; then
            echo "## Accessibility Tests" >> $GITHUB_STEP_SUMMARY
            echo "Accessibility test results available in artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Visual Tests: ${{ needs.visual-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
