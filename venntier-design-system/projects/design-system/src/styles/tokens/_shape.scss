@use 'sass:map';

// ============================================================================
// SHAPE REFERENCE TOKENS - Raw radius values (single source of truth)
// ============================================================================
// Minimal rounded corners for clean OpenAI aesthetic

// Base radius values
$radius-none: 0;
$radius-xs: 2px;
$radius-sm: 4px;
$radius-md: 6px;
$radius-lg: 8px;
$radius-xl: 12px;
$radius-2xl: 16px;
$radius-3xl: 24px;
$radius-full: 9999px;

// ============================================================================
// SEMANTIC SHAPE MAPPINGS (for Angular Material theming API)
// ============================================================================
// These map our reference tokens to semantic roles that Angular Material understands

// Shape mappings for components
$component-shapes: (
  // Corner radius mappings
  corner-none: $radius-none,
  corner-extra-small: $radius-xs,
  corner-small: $radius-sm,
  corner-medium: $radius-md,
  corner-large: $radius-lg,
  corner-extra-large: $radius-xl,
  corner-full: $radius-full
);

// Component-specific shape mappings
$component-specific-shapes: (
  // Component shapes (from design requirements)
  button: $radius-md,
  // 6px
  card: $radius-lg,
  // 8px
  dialog: $radius-xl,
  // 12px
  chip: $radius-full,
  // pill
  input: $radius-md,
  // 6px
  container: $radius-lg,
  // 8px
  tooltip: $radius-sm,
  // 4px
  menu: $radius-md,
  // 6px
  badge: $radius-full,
  // pill
  snackbar: $radius-sm // 4px
);

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

// Get a shape reference token value
@function get-shape($name) {
  $shape-map: (
    'none': $radius-none,
    'xs': $radius-xs,
    'sm': $radius-sm,
    'md': $radius-md,
    'lg': $radius-lg,
    'xl': $radius-xl,
    '2xl': $radius-2xl,
    '3xl': $radius-3xl,
    'full': $radius-full,
  );

  @if map.has-key($shape-map, $name) {
    @return map.get($shape-map, $name);
  } @else {
    @error "Shape '#{$name}' not found in shape map.";
  }
}
